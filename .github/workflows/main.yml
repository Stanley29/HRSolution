name: .NET CI/CD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install .NET Framework Build Tools
        run: |
          Invoke-WebRequest -Uri https://aka.ms/vs/17/release/vs_buildtools.exe -OutFile vs_buildtools.exe
          Start-Process -Wait -NoNewWindow -FilePath .\vs_buildtools.exe -ArgumentList `
            '--add Microsoft.VisualStudio.Workload.ManagedDesktopBuildTools', `
            '--add Microsoft.VisualStudio.Workload.NetWeb', `
            '--add Microsoft.VisualStudio.Workload.WebBuildTools', `
            '--add Microsoft.VisualStudio.ComponentGroup.WebToolsExtensions', `
            '--add Microsoft.VisualStudio.ComponentGroup.WebDeploy', `
            '--quiet', '--wait', '--norestart', '--nocache'

      - name: Restore NuGet Packages
        run: nuget restore .\HRSolution.sln

      - name: Find and Use MSBuild
        id: find-msbuild
        shell: powershell
        run: |
          $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          if (-Not (Test-Path $vswhere)) {
            Invoke-WebRequest -Uri https://aka.ms/vs/17/release/vswhere.exe -OutFile $vswhere
          }
          $msbuildPath = & $vswhere -latest -products * -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe
          if (-Not $msbuildPath) {
            Write-Error "MSBuild executable not found"
            exit 1
          }
          echo "MSBuild found at: $msbuildPath"
          echo "MSBUILD_PATH=$msbuildPath" >> $env:GITHUB_ENV

      - name: Publish to folder
        shell: powershell
        run: |
          $msbuildPath = $env:MSBUILD_PATH
          $solutionPath = Resolve-Path -Path .\HRSolution.sln
          $publishProfilePath = Resolve-Path -Path .\HRWebsite\Properties\PublishProfiles\FolderProfile.pubxml
          $publishDir = Join-Path -Path (Split-Path -Path $solutionPath) -ChildPath "publish"
          New-Item -ItemType Directory -Path $publishDir -Force
          Write-Output "Publishing to: $publishDir"
          & $msbuildPath $solutionPath /p:DeployOnBuild=true /p:PublishProfile=$publishProfilePath /p:PublishUrl=$publishDir /verbosity:detailed
          Write-Output "Files in publish directory after publish:"
          Get-ChildItem -Path $publishDir

      - name: Verify Published Files
        run: |
          if (Test-Path -Path .\publish) {
            Write-Output "Publish directory exists and contains:"
            Get-ChildItem -Path .\publish
          } else {
            Write-Error "Publish directory does not exist."
            exit 1
          }

      - name: Save Published Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: publish-files
          path: publish

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: publish-files
          path: ./downloaded-artifacts

      - name: Install AWS CLI
        run: |
          Invoke-WebRequest "https://awscli.amazonaws.com/AWSCLIV2.msi" -OutFile "AWSCLIV2.msi"
          Start-Process msiexec.exe -ArgumentList '/i AWSCLIV2.msi /qn' -NoNewWindow -Wait

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-1

      - name: Deploy to EC2
        run: |
          $localPath = "D:\\a\\_temp\\downloaded-artifacts"
          $outputPath = "C:\\inetpub\\wwwroot\\my-web-app"

          # Compare the version of the files (you need to implement your own version comparison logic)
          if ((Compare-Object (Get-ChildItem $localPath) (Get-ChildItem $outputPath)) -ne $null) {
            # Copy files to EC2 instance
            aws ssm send-command --document-name "AWS-RunPowerShellScript" --targets "Key=instanceids,Values=i-03e9aae15f5899ea1" --parameters "commands=Copy-Item -Path $localPath\\* -Destination $outputPath -Recurse -Force"

            # Restart IIS to apply changes
            aws ssm send-command --document-name "AWS-RunPowerShellScript" --targets